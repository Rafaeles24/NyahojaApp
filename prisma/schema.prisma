// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//USUARIO DE DISCORD
model Usuario {
  discord_id String @id

  guilds GuildMember[]
  @@map("usuarios")
}

//DATOS DE GUILD DE DISCORD
model Guild {
  discord_id String @id

  partidas Partida[]
  miembros GuildMember[]
  @@map("guilds")
}

//DATOS DEL USUARIO DENTRO DE UNA GUILD
model GuildMember {
  guild_id String
  usuario_id String
  partida_id Int?
  created_at DateTime @default(now())
  
  //El miembro de la guild es un usuario
  usuario Usuario @relation(fields: [usuario_id], references: [discord_id], onDelete: Cascade, onUpdate: Cascade)
  //El miembro pertenece a una guild
  guild Guild @relation(fields: [guild_id], references: [discord_id], onDelete: Cascade, onUpdate: Cascade)
  //El miembro esta en una partida o no
  partida Partida? @relation(fields: [partida_id], references: [id], onDelete: SetNull)

  @@id([usuario_id, guild_id])
  @@index([partida_id])
  @@map("guild_member")
}


//Juegos de nyahoja
model Juegos {
  id Int @id @default(autoincrement())
  nombre String
  veces_jugado Int @default(0)

  partidas Partida[]
  @@map("juegos_registrados")
}

model Partida {
  id Int @id @default(autoincrement())
  guild_id String
  juego_id Int
  estado_partida String @default("espera")
  created_at DateTime @default(now())

  guild Guild @relation(fields: [guild_id], references: [discord_id])
  juego Juegos @relation(fields: [juego_id], references: [id])
  miembros GuildMember[]

  @@map("partidas")
}
